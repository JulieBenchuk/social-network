{"version":3,"file":"static/js/3.dc01d00e.chunk.js","mappings":"sKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA8G,6BAA9G,EAAwJ,4BAAxJ,EAAqM,gCAArM,EAAoP,8BAApP,EAAgS,6BAAhS,EAA8U,gCAA9U,EAAsX,uB,SCMzWA,EAA0C,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrD,OACI,0BACI,gBAAKC,UAAWC,EAAhB,SAAgCF,KAG3C,E,6CCHYG,EAA4C,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAC7DC,IADuF,YAChF,YAAcH,GACzB,OACI,gBAAKH,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASM,GAAID,EAAMN,UAAWC,EAA9B,WACI,gBAAKO,IAAKH,EAAQI,IAAKL,KACvB,0BAAOA,QAItB,E,iDCcKM,GAAsBC,EAAAA,EAAAA,GAAiB,KAWvCC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAVL,SAACE,GACpB,OACI,kBAAMC,SAAUD,EAAME,aAAcjB,UAAWkB,EAA/C,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUjB,KAAK,iBAAiBkB,YAAY,wBACvDC,SAAU,CAACC,EAAAA,EAAUd,GAAsBV,UAAWkB,KAE7D,SAACO,EAAA,EAAD,CAAaC,KAAM,SAAnB,4BAGX,IAGD,EApCgB,SAACX,GACb,IAAIY,EAAQZ,EAAMa,YAMlB,OACI,iBAAK5B,UAAWkB,EAAhB,WACI,iBAAKlB,UAAWkB,EAAhB,WACI,gBAAKlB,UAAWkB,EAAhB,SACKS,EAAME,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OACf,SAAC9B,EAAD,CAAwBC,GAAI4B,EAAE5B,GAAIC,KAAM2B,EAAE3B,KAAMC,OAAQ0B,EAAE1B,QAAzC2B,EADF,OAGvB,gBAAKhC,UAAWkB,EAAhB,SACKS,EAAMM,SAASH,KAAI,SAAA/B,GAAO,OACvB,SAACD,EAAD,CAA8BK,GAAIJ,EAAQI,GAAIJ,QAASA,EAAQA,SAA7CA,EAAQI,GADH,UAInC,SAACS,EAAD,CAAqBI,SAjBP,SAACkB,GACnBnB,EAAMoB,YAAYD,EAAOE,gBACzBF,EAAOE,eAAe,EACzB,MAiBJ,E,wCCQD,GAAeC,EAAAA,EAAAA,KAA8BC,EAAAA,EAAAA,KAZvB,SAACX,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE1B,IACwB,SAACW,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,IAAcJ,GAC1B,EAER,IAEGK,EAAAA,EADJ,CACsBC,E,mIClClBC,EAA6B,SAAChB,GAAD,MAA0D,CACvFiB,OAAQjB,EAAMkB,KAAKD,OADU,EAI1B,SAASH,EAAqBK,GAOlC,OADsCR,EAAAA,EAAAA,IAAQK,EAARL,EANyB,SAA2BvB,GACrF,IAAK6B,EAAwB7B,EAAxB6B,OAAWG,GAAhB,OAA6BhC,EAA7B,GACA,OAAK6B,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUxC,GAAI,UAErC,GAIJ,C","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsBlock\":\"Dialogs_dialogsBlock__qBg+B\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"dialogItem\":\"Dialogs_dialogItem__Gr+yc\",\"dialogItemLink\":\"Dialogs_dialogItemLink__SO+I7\",\"messageItems\":\"Dialogs_messageItems__2qxh-\",\"messageItem\":\"Dialogs_messageItem__cPCfl\",\"addMessageForm\":\"Dialogs_addMessageForm__8nO+b\",\"field\":\"Dialogs_field__cBI1v\"};","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\n\nexport type MessagePropsType = {\n    id: number\n    message: string\n}\nexport const MessageItem: React.FC<MessagePropsType> = ({message}) => {\n    return (\n        <div>\n            <div className={s.messageItem}>{message}</div>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type DialogItemPropsType = {\n    id: number\n    name: string\n    avatar: string\n};\n\nexport const DialogItem: React.FC<DialogItemPropsType> = ({id, name, avatar, ...restProps}) => { //не выделяется активная ссылка\n    let path = \"messages/\" + id\n    return (\n        <div className={s.dialogItemLink}>\n            <NavLink to={path} className={s.dialogItem}>\n                <img src={avatar} alt={name}/>\n                <span>{name}</span>\n            </NavLink>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport style from \"./Dialogs.module.css\";\nimport {MessageItem} from \"./Message/Message\";\nimport {DialogItem} from \"./DialogItem/DialogItem\"\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/Forms-control/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {SuperButton} from \"../../common/SuperButton/SuperButton\";\n\n\nconst Dialogs = (props: DialogsPropsType) => {\n    let state = props.dialogsPage\n    const addNewMessage = (values: any) => {\n        props.sendMessage(values.newMessageBody)\n        values.newMessageBody=\"\"\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.dialogsBlock}>\n                <div className={style.dialogItems}>\n                    {state.dialogs.map((d, index) => (\n                        <DialogItem key={index} id={d.id} name={d.name} avatar={d.avatar}/>))}\n                </div>\n                <div className={style.messageItems}>\n                    {state.messages.map(message => (\n                        <MessageItem key={message.id} id={message.id} message={message.message}/>))}\n                </div>\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\nconst maxLengthCreator100 = maxLengthCreator(100);\nconst AddMessageForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={style.addMessageForm}>\n            <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message...\"\n                   validate={[required, maxLengthCreator100]} className={style.field}/>\n\n            <SuperButton type={\"submit\"}>Send message</SuperButton>\n        </form>\n    )\n}\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\n\nexport default Dialogs;\n\n\n","import React from 'react';\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\n\ntype MessageType = {\n    id: number\n    message: string\n}\ntype DialogType = {\n    id: number\n    name: string\n    avatar: string\n}\ntype DialogsPageType = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogType>\n}\ntype MapStatePopsType = {\n    dialogsPage: DialogsPageType\n}\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string)=> void\n}\nexport type DialogsPropsType = MapStatePopsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType) : MapStatePopsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody: string)=>{\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\nexport default compose<React.ComponentType> (connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)(Dialogs)\n\n\n\n\n","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>){function RedirectComponent(props: MapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n   return ConnectedAuthRedirectComponent;\n};\n\n"],"names":["MessageItem","message","className","s","DialogItem","id","name","avatar","path","to","src","alt","maxLengthCreator100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","style","Field","component","Textarea","placeholder","validate","required","SuperButton","type","state","dialogsPage","dialogs","map","d","index","messages","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageAC","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}