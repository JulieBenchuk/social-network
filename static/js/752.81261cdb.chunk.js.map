{"version":3,"file":"static/js/752.81261cdb.chunk.js","mappings":"+OACA,EAA8B,iCAA9B,EAAgF,oCAAhF,EAAkI,iC,UCAlI,EAA8B,mCAA9B,EAAgF,oC,SCyChF,EAlC0E,SAAC,GAAqC,IAApCA,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,QAC9F,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAsCF,EAAAA,EAAAA,UAASH,GAA/C,eAAOM,EAAP,KAAoBC,EAApB,KAsBA,OALAC,EAAAA,EAAAA,YAAU,WACND,EAAeP,EAClB,GAAE,CAACA,KAGG,2BACDI,IAAY,0BACV,iBAAMK,UAAWC,EAAeC,cAZL,WAC/B,IAAIT,EAEG,OAAO,EAbdG,GAAY,EAcf,EAQO,SAA4EL,GAAU,mBAEzFI,IAAY,0BACT,kBAAOK,UAAWC,EAAgBE,SAlBnB,SAACC,GACpBN,EAAeM,EAAEC,cAAcC,MAClC,EAgBmEC,WAAS,EAACC,OAvBnD,WACvBZ,GAAY,GACZJ,EAAaK,EAEhB,EAoBcY,YAAa,SAAUH,MAAOT,QAGhD,E,UCxCD,EAA+B,kCAA/B,EAA+E,iCAA/E,EAAuH,0BCAvH,EAA0B,yBAA1B,EAA2D,uBAA3D,EAA0F,uBCM7Ea,EAAsC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC/D,OACI,iBAAKZ,UAAWC,EAAhB,WACI,kBAAMD,UAAWC,EAAjB,UAA2BU,EAA3B,QACA,iBAAMX,UAAWC,EAAjB,SAA2BW,MAGtC,ECJYC,EAA8C,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASrB,EAA0B,EAA1BA,QAASG,EAAiB,EAAjBA,YAC3E,OACI,iBAAKI,UAAWC,EAAhB,UACKR,IAAW,gBAAKO,UAAWC,EAAhB,UACR,mBAAQc,QAASnB,EAAjB,6BAEJ,iBAAKI,UAAWC,EAAhB,WACI,wBAAKa,EAAQE,YACb,4BACI,sCACCF,EAAQG,YAEb,4BACI,yCACCH,EAAQI,eAAiB,MAAQ,SAEtC,4BACI,yCACCJ,EAAQK,8BAEb,4BACI,sCACCL,EAAQM,UAAYC,OAAOC,KAAKR,EAAQM,UAAUG,KAAI,SAAAC,GACnD,OAAO,SAACd,EAAD,CAAmBC,aAAca,EAAKZ,aAAcE,EAAQM,SAASI,IAAvDA,EACxB,YAKpB,E,6BCtCD,EAAwB,+BCwDXC,GAAuBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,gBAA1CD,EA3CiD,SAAC,GAGO,IAFHE,EAEE,EAFFA,aACAC,EACE,EADFA,cAAeC,EACb,EADaA,MAErG,OACI,kBAAMC,SAAUH,EAAhB,WAEI,0BACI,wCAGJ,4BACI,wCACA,SAACI,EAAA,EAAD,CAAOvB,YAAY,YAAYwB,KAAM,WAAYC,UAAWC,EAAAA,KAC5D,4BACI,uCACA,SAACH,EAAA,EAAD,CAAOvB,YAAY,WAAWwB,KAAM,UAAWC,UAAWE,EAAAA,QAE9D,4BACI,0CACA,SAACJ,EAAA,EAAD,CAAOC,KAAM,iBAAkBC,UAAWC,EAAAA,EAAOE,KAAM,iBAE3D,4BACI,wCACA,SAACL,EAAA,EAAD,CAAOvB,YAAY,YAAYwB,KAAM,4BAA6BC,UAAWE,EAAAA,QAGjF,4BACI,sCAECP,EAAcT,UAAYC,OAAOC,KAAKO,EAAcT,UAAUG,KAAI,SAAAC,GAC/D,OAAO,4BACH,yBAAIA,EAAJ,QACA,SAACQ,EAAA,EAAD,CAAOvB,YAAae,EAAKS,KAAM,YAAcT,EAAKU,UAAWC,EAAAA,IAC5DL,IAAS,gBAAK9B,UAAWC,EAAhB,SAA0B6B,MAHvBN,EAKpB,YAKpB,I,kFCnCYc,EAA8C,SAAC,GAQO,IAPHxB,EAOE,EAPFA,QACAtB,EAME,EANFA,aACAD,EAKE,EALFA,OACAE,EAIE,EAJFA,QACA8C,EAGE,EAHFA,kBACAC,EAEE,EAFFA,YAG5D,IAD8D,aAC9B9C,EAAAA,EAAAA,WAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,IAAKkB,EACD,OAAO,SAAC2B,EAAA,EAAD,IAcX,OACI,iCACI,gBAAKzC,UAAWC,EAAhB,UACI,gBACIyC,IAAI,6GAGZ,iBAAK1C,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKyC,IAAK5B,EAAQ6B,OAAS7B,EAAQ6B,OAAOC,MAAQC,MAGrDpD,IAAW,kBAAO4C,KAAK,OAAOlC,SAtBZ,SAACC,GACxBA,EAAE0C,OAAOC,OAAS3C,EAAE0C,OAAOC,MAAMC,QACjCT,EAAkBnC,EAAE0C,OAAOC,MAAM,GAExC,KAoBW,SAAC,EAAD,CAAwBxD,OAAQA,EAAQC,aAAcA,EAAcC,QAASA,IAE5EE,GACK,SAAC8B,EAAD,CAAsBM,SAtBvB,SAACjB,GACd0B,EAAY1B,EAEf,EAmB2De,cAAef,KACzD,SAACD,EAAD,CAAaC,QAASA,EAASrB,QAASA,EAASG,YAAa,kBAAMA,GAAY,EAAlB,SAKnF,E,UCpED,EAA6B,4BAA7B,EAAyE,+BAAzE,EAA0H,iCCA1H,EAAuB,mBAAvB,EAAsD,wBAAtD,EAA6F,2BAA7F,EAAoI,wBCyBpI,EAjBsC,SAAC,GAAuB,IAAtBqD,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC1C,OACI,gBAAKlD,UAAWmD,EAAhB,UACI,iBAAKnD,UAAWmD,EAAhB,WACI,gBACIT,IAAI,4JACR,gBAAK1C,UAAWmD,EAAhB,SACKF,KAEL,iBAAKjD,UAAWmD,EAAhB,WACI,iCAAO,gBAAKT,IAAI,+FAA+FU,IAAI,aADvH,IACyIF,SAKxJ,E,gCChBKG,GAAqBC,EAAAA,EAAAA,GAAiB,IA6BtCC,GAAsB7B,EAAAA,EAAAA,GAAU,CAACC,KAAM,8BAAjBD,EAXL,SAAC8B,GACpB,OAAQ,kBAAMxD,UAAWmD,EAAyBpB,SAAUyB,EAAM5B,aAA1D,WACA,0BACI,SAACI,EAAA,EAAD,CAAOE,UAAWE,EAAAA,EAAUH,KAAK,cAAcxB,YAAa,cAAegD,SAAU,CAACC,EAAAA,EAAUL,QAEpG,0BACI,6CAIf,I,UCLYM,GAAmBC,EAAAA,EAAAA,KAZV,SAACC,GACnB,MAAO,CACHC,MAAOD,EAAME,YAAYD,MAEhC,IACwB,SAACE,GACtB,MAAO,CACHC,QAAS,SAACC,GACNF,GAASG,EAAAA,EAAAA,IAAUD,GACtB,EAER,GAC+BN,EDrBmB,SAAC,GAAoC,IAAnCK,EAAkC,EAAlCA,QAASH,EAAyB,EAAzBA,MAItDM,IAJ+E,YAIhEN,EAAMvC,KAAI,SAAC8C,EAAGC,GAAJ,OACzB,SAAC,EAAD,CAAkBC,GAAIF,EAAEE,GAAItB,KAAMoB,EAAEpB,KAAMC,UAAWmB,EAAEnB,WAA5CoB,EADc,KAG7B,OACI,iBAAKtE,UAAWmD,EAAhB,WACI,eAAInD,UAAWmD,EAAf,uBACA,SAACI,EAAD,CAAqBxB,SATb,SAACyC,GACbP,EAAQO,EAAON,YAClB,IAQQE,IAGZ,I,2FEWD,EAnB4C,SAAC,GASO,IARHK,EAQE,EARFA,OACA3D,EAOE,EAPFA,QACAvB,EAME,EANFA,OACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,QACA8C,EAGE,EAHFA,kBACAC,EAEE,EAFFA,aAEE,YAC/C,OACI,4BACI,SAACF,EAAD,CAAaxB,QAASA,EAASvB,OAAQA,EAAQC,aAAcA,EAAcC,QAASA,EACvE8C,kBAAmBA,EAAmBC,YAAaA,EAAaiC,OAAQA,KACrF,SAACd,EAAD,MAGX,E,+BCWKe,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CA8BD,OA9BCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACF,WACI,IAAID,EAASE,KAAKnB,MAAMoB,MAAMC,OAAOJ,OAChCA,IACDA,EAASE,KAAKnB,MAAMsB,mBAEhBH,KAAKnB,MAAMuB,QAAQC,KAAK,UAGhCL,KAAKnB,MAAMyB,eAAeR,GAC1BE,KAAKnB,MAAM0B,cAAcT,EAC5B,kCAED,WACIE,KAAKQ,gBACR,mCAED,SAAmBC,EAAgCC,EAAyBC,GACpEX,KAAKnB,MAAMoB,MAAMC,OAAOJ,SAAWW,EAAUR,MAAMC,OAAOJ,QAC1DE,KAAKQ,gBAEZ,uBAGD,WACI,OACI,SAAC,GAAD,kBAAaR,KAAKnB,OAAlB,IAAyBiB,OAAQE,KAAKnB,MAAMsB,iBAAkBrF,SAAUkF,KAAKnB,MAAMoB,MAAMC,OAAOJ,OAAQ3D,QAAS6D,KAAKnB,MAAM1C,QACnHvB,OAAQoF,KAAKnB,MAAMjE,OACnBC,aAAcmF,KAAKnB,MAAMhE,aAAc+C,kBAAmBoC,KAAKnB,MAAMjB,oBAErF,OA9BCmC,CAAyBa,EAAAA,WAiC/B,IAAeC,EAAAA,GAAAA,KACX5B,EAAAA,EAAAA,KA1CkB,SAACC,GAAD,MAA+C,CACjE/C,QAAS+C,EAAME,YAAYjD,QAC3BvB,OAAQsE,EAAME,YAAYxE,OAC1BkG,OAAQ5B,EAAM6B,KAAKD,OACnBX,iBAAkBjB,EAAM6B,KAAKnB,GAJX,GA0CO,CACrBU,eAAgBU,EAAAA,GAChBT,cAAeU,EAAAA,GACfpG,aAAcqG,EAAAA,GACdtD,kBAAmBuD,EAAAA,GACnBtD,YAAauD,EAAAA,KAEjBC,EAAAA,GAAYC,EAAAA,EARhB,CAQkCvB,G,mIC7E9BwB,EAA6B,SAACrC,GAAD,MAA0D,CACvF4B,OAAQ5B,EAAM6B,KAAKD,OADU,EAI1B,SAASQ,EAAqBE,GAOlC,OADsCvC,EAAAA,EAAAA,IAAQsC,EAARtC,EANyB,SAA2BJ,GACrF,IAAKiC,EAAwBjC,EAAxBiC,OAAWW,GAAhB,OAA6B5C,EAA7B,GACA,OAAKiC,GACE,SAACU,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUC,GAAI,UAErC,GAIJ,C,iKCnBc,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACI/E,EAAKiF,EADL3D,GAAS,OAA6ByD,EAAQC,GAGlD,GAAInF,OAAOqF,sBAAuB,CAChC,IAAIC,EAAmBtF,OAAOqF,sBAAsBH,GAEpD,IAAKE,EAAI,EAAGA,EAAIE,EAAiB3D,OAAQyD,IACvCjF,EAAMmF,EAAiBF,GACnBD,EAASI,QAAQpF,IAAQ,GACxBH,OAAOwF,UAAUC,qBAAqBC,KAAKR,EAAQ/E,KACxDsB,EAAOtB,GAAO+E,EAAO/E,GAEzB,CAEA,OAAOsB,CACT,C","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ProfileData.module.css?ce4d","webpack://samurai-way/./src/components/Profile/Contact/Contact.module.css?a337","components/Profile/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__QG8TK\",\"profile_avatar\":\"ProfileInfo_profile_avatar__VJNQY\",\"profile_top\":\"ProfileInfo_profile_top__43BOW\"};","// extracted by mini-css-extract-plugin\nexport default {\"status_span\":\"ProfileStatus_status_span__zHK1n\",\"status_input\":\"ProfileStatus_status_input__bTamG\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from \"./ProfileStatus.module.css\"\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus, isOwner}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [innerStatus, setInnerStatus] = useState(status)\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateStatus(innerStatus)\n\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInnerStatus(e.currentTarget.value)\n    }\n    const onDoubleClickOnSpanHandler = () => {\n        if (isOwner) {\n            activateEditMode()\n        } else return false\n    }\n    useEffect(() => {\n        setInnerStatus(status)\n    }, [status])\n\n\n    return <h3>\n        {!editMode && <div>\n            <span className={s.status_span} onDoubleClick={onDoubleClickOnSpanHandler}>{status || \"no status :(\"}</span>\n        </div>}\n        {editMode && <div>\n            <input className={s.status_input} onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\n                   placeholder={\"status\"} value={innerStatus}/>\n        </div>}\n    </h3>\n}\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"profile_data\":\"ProfileData_profile_data__9qsUa\",\"description\":\"ProfileData_description__QBhvE\",\"edit\":\"ProfileData_edit__tP1nd\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__iBnrC\",\"title\":\"Contact_title__ZKO0l\",\"value\":\"Contact_value__przRR\"};","import React from 'react';\nimport s from \"./Contact.module.css\"\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            <span className={s.title}>{contactTitle}:</span>\n            <span className={s.value}>{contactValue}</span>\n        </div>\n    );\n};","import React from 'react';\nimport s from \"./ProfileData.module.css\";\nimport {UserProfileType} from \"../../../../api/api\";\nimport {Contact} from \"../../Contact/Contact\";\n\nexport type ProfileDataPropsType = {\n    profile: UserProfileType\n    isOwner: boolean\n    setEditMode: ()=>void\n}\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, setEditMode}) => {\n    return (\n        <div className={s.profile_data}>\n            {isOwner && <div className={s.edit}>\n                <button onClick={setEditMode}>Edit profile</button>\n            </div>}\n            <div className={s.description}>\n                <h2>{profile.fullName}</h2>\n                <div>\n                    <b>About me: </b>\n                    {profile.aboutMe}\n                </div>\n                <div>\n                    <b>Looking job: </b>\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                <div>\n                    <b>My skills: : </b>\n                    {profile.lookingForAJobDescription}\n                </div>\n                <div>\n                    <b>Contacts: </b>\n                    {profile.contacts && Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"ProfileDataForm_error__DYUqN\"};","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../../../common/Forms-control/FormsControl\";\nimport {ContactsType} from \"../../../../api/api\";\nimport s from \"./ProfileDataForm.module.css\"\n\nexport type ProfileDataFormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    contacts: ContactsType\n    aboutMe: string\n}\n\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormDataType>> = ({\n                                                                                          handleSubmit,\n                                                                                          initialValues, error\n                                                                                      }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n\n            <div>\n                <button>Save</button>\n            </div>\n\n            <div>\n                <b>Full name: </b>\n                <Field placeholder=\"full name\" name={\"fullName\"} component={Input}/>\n                <div>\n                    <b>About me: </b>\n                    <Field placeholder=\"about me\" name={\"aboutMe\"} component={Textarea}/>\n                </div>\n                <div>\n                    <b>Looking job: </b>\n                    <Field name={\"lookingForAJob\"} component={Input} type={\"checkbox\"}/>\n                </div>\n                <div>\n                    <b>My skills: </b>\n                    <Field placeholder=\"my skills\" name={\"lookingForAJobDescription\"} component={Textarea}/>\n                </div>\n\n                <div>\n                    <b>Contacts: </b>\n\n                    {initialValues.contacts && Object.keys(initialValues.contacts).map(key => {\n                        return <div key={key}>\n                            <b>{key}:</b>\n                            <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\n                            {error && <div className={s.error}>{error}</div>}\n                        </div>\n                    })}\n                </div>\n            </div>\n        </form>\n    );\n};\n\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormDataType>({form: \"edit_profile\"})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../../common/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport avatar_default from \"./../../../assets/img/avatar_default.webp\"\nimport {UserProfileType} from \"../../../api/api\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormDataType, ProfileDataReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\n\n\ntype ProfileInfoPropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                                profile,\n                                                                updateStatus,\n                                                                status,\n                                                                isOwner,\n                                                                saveSelectedPhoto,\n                                                                saveProfile,\n                                                                ...restProps\n                                                            }) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n\n    const onPhotoSelectedHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            saveSelectedPhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (profile: ProfileDataFormDataType) => {\n        saveProfile(profile)\n        //setEditMode(false)\n    }\n\n    return (\n        <>\n            <div className={s.profile_top}>\n                <img\n                    src=\"https://www.xmple.com/wallpaper/blue-violet-gradient-linear-1920x1080-c2-1e90ff-66078b-a-225-f-14.svg\"/>\n            </div>\n\n            <div className={s.profileInfo}>\n                <div className={s.profile_avatar}>\n                    <img src={profile.photos ? profile.photos.large : avatar_default}/>\n                </div>\n\n                {isOwner && <input type=\"file\" onChange={onPhotoSelectedHandler}/>}\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\n\n                {editMode\n                    ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} setEditMode={() => setEditMode(true)}/>}\n            </div>\n        </>\n    );\n\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"myPostsHeader\":\"MyPosts_myPostsHeader__Tner+\",\"textArea_Button\":\"MyPosts_textArea_Button__PXBSb\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"postStyle\":\"Post_postStyle__RX8XC\",\"avatarOfPost\":\"Post_avatarOfPost__Y5UhE\",\"likeCount\":\"Post_likeCount__kwfc5\"};","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\nexport type PostPropsType = {\n    id: number\n    post: string\n    likeCount: number\n}\n\nconst Post: React.FC<PostPropsType> = ({post, likeCount}) => {\n    return (\n        <div className={classes.post}>\n            <div className={classes.avatarOfPost}>\n                <img\n                    src=\"https://static.vecteezy.com/system/resources/previews/004/899/833/large_2x/beautiful-girl-with-blue-hair-avatar-of-woman-for-social-network-vector.jpg\"/>\n                <div className={classes.postStyle}>\n                    {post}\n                </div>\n                <div className={classes.likeCount}>\n                    <span> <img src=\"https://www.pinclipart.com/picdir/middle/59-595072_heart-instagram-like-icon-png-clipart.png\" alt=\"likes\"/></span> {likeCount}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/Forms-control/FormsControl\";\n\nconst maxLengthCreator30 = maxLengthCreator(30);\n\nexport const MyPosts: React.FC<MyPostsPropsType> = ({addPost, posts, ...restProps}) => {\n    let onAddPost = (values: any) => {\n        addPost(values.newPostText);\n    }\n    let postElements = posts.map((p, index) => (\n        <Post key={index} id={p.id} post={p.post} likeCount={p.likeCount}/>))\n\n    return (\n        <div className={classes.postsBlock}>\n            <h3 className={classes.myPostsHeader}>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            {postElements}\n        </div>\n    )\n}\n\nconst AddNewPostForm = (props: any) => {\n    return (<form className={classes.textArea_Button} onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name=\"newPostText\" placeholder={\"What's new?\"} validate={[required, maxLengthCreator30]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostFormRedux\"})(AddNewPostForm)","import React from \"react\";\nimport {addPostAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype PostType = {\n    id: number\n    post: string\n    likeCount: number\n}\ntype MapStateToPropsType = {\n    posts: PostType[]\n}\ntype MapDispatchToProps = {\n    addPost: (newPostText: string)=>void\n}\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType=> {\n    return {\n        posts: state.profilePage.posts\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../api/api\";\n\n\ntype ProfilePropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = ({\n                                                 userID,\n                                                 profile,\n                                                 status,\n                                                 updateStatus,\n                                                 isOwner,\n                                                 saveSelectedPhoto,\n                                                 saveProfile,\n                                                 ...restProps\n                                             }) => {\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner}\n                         saveSelectedPhoto={saveSelectedPhoto} saveProfile={saveProfile} userID={userID}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    getStatusTC,\n    getUserProfileTC, saveProfileTC, saveSelectedPhotoTC,\n    updateStatusTC\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {UserProfileType} from \"../../api/api\";\n\n\ntype MapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserID: number | null\n\n\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (profile: any) => void\n    getUserStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n}\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PathParamsType = {\n    userID: any\n}\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    isAuth: state.auth.isAuth,\n    authorizedUserID: state.auth.id\n\n})\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = this.props.authorizedUserID\n            if (!userID) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userID)\n        this.props.getUserStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\n            this.refreshProfile()\n        }\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props} userID={this.props.authorizedUserID} isOwner={!this.props.match.params.userID} profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus} saveSelectedPhoto={this.props.saveSelectedPhoto}/>\n        )\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUserProfile: getUserProfileTC,\n        getUserStatus: getStatusTC,\n        updateStatus: updateStatusTC,\n        saveSelectedPhoto: saveSelectedPhotoTC,\n        saveProfile: saveProfileTC\n    }),\n    withRouter, withAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>){function RedirectComponent(props: MapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n   return ConnectedAuthRedirectComponent;\n};\n\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["status","updateStatus","isOwner","useState","editMode","setEditMode","innerStatus","setInnerStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","placeholder","Contact","contactTitle","contactValue","ProfileData","profile","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","Object","keys","map","key","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","Field","name","component","Input","Textarea","type","ProfileInfo","saveSelectedPhoto","saveProfile","Preloader","src","photos","large","avatar_default","target","files","length","post","likeCount","classes","alt","maxLengthCreator30","maxLengthCreator","AddNewPostFormRedux","props","validate","required","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","newPostText","addPostAC","postElements","p","index","id","values","userID","ProfileContainer","this","match","params","authorizedUserID","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","isAuth","auth","getUserProfileTC","getStatusTC","updateStatusTC","saveSelectedPhotoTC","saveProfileTC","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to","_objectWithoutProperties","source","excluded","i","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}