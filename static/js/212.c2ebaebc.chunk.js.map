{"version":3,"file":"static/js/212.c2ebaebc.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ProfileData.module.css?ce4d","webpack://samurai-way/./src/components/Profile/Contact/Contact.module.css?a337","components/Profile/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","webpack://samurai-way/./src/common/ModalWindow/ModalWindow.module.css?5bc5","common/ModalWindow/ModalWindow.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.module.css?47f3","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileAvatar/ProfileStatus/ProfileStatus.module.css?3569","components/Profile/ProfileInfo/ProfileAvatar/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__XM2oU\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__ZTFU2\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile_data\":\"ProfileData_profile_data__9qsUa\",\"description\":\"ProfileData_description__QBhvE\",\"descriptionItem\":\"ProfileData_descriptionItem__xMqvG\",\"edit\":\"ProfileData_edit__tP1nd\",\"descriptionIcon\":\"ProfileData_descriptionIcon__YzH8V\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__iBnrC\",\"title\":\"Contact_title__ZKO0l\",\"noValue\":\"Contact_noValue__GUg0l\",\"value\":\"Contact_value__przRR\"};","import React from 'react';\nimport s from \"./Contact.module.css\"\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            <span className={s.title}>{contactTitle}:</span>\n            <span className={s.value}>{contactValue ? contactValue : <span className={s.noValue}>no info</span>}</span>\n        </div>\n    );\n};","import React from 'react';\nimport s from \"./ProfileData.module.css\";\nimport {UserProfileType} from \"../../../../api/api\";\nimport {Contact} from \"../../Contact/Contact\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faAddressCard} from '@fortawesome/free-regular-svg-icons'\nimport {faCircleCheck} from '@fortawesome/free-regular-svg-icons'\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { faLink} from '@fortawesome/free-solid-svg-icons'\nimport { faPen} from '@fortawesome/free-solid-svg-icons'\n\nexport type ProfileDataPropsType = {\n    profile: UserProfileType\n    isOwner: boolean\n    setEditMode: ()=>void\n}\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, setEditMode}) => {\n    return (\n        <div className={s.profile_data}>\n            <div className={s.description}>\n                <h2>{profile.fullName}</h2>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faAddressCard} className={s.descriptionIcon}/>\n                    <b> About me: </b>\n                    {profile.aboutMe ? profile.aboutMe : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faMagnifyingGlass} className={s.descriptionIcon}/>\n                    <b> Looking for a job: </b>\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faCircleCheck} className={s.descriptionIcon}/>\n                    <b> My skills: : </b>\n                    {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faLink} className={s.descriptionIcon}/>\n                    <b> Contacts: </b>\n                    {profile.contacts && Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    })}\n                </div>\n            </div>\n            {isOwner && <div className={s.edit}>\n                <button onClick={setEditMode}>\n                    <FontAwesomeIcon icon={faPen} className={s.descriptionIcon}/>\n                    {\" Edit profile\"}\n                </button>\n            </div>}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"ProfileDataForm_error__DYUqN\",\"profileDataForm\":\"ProfileDataForm_profileDataForm__d4e88\",\"dataItem\":\"ProfileDataForm_dataItem__G17JM\",\"checkbox\":\"ProfileDataForm_checkbox__DO0Uc\",\"contacts\":\"ProfileDataForm_contacts__xd39g\"};","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../../../common/Forms-control/FormsControl\";\nimport {ContactsType} from \"../../../../api/api\";\nimport s from \"./ProfileDataForm.module.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faAddressCard, faCircleCheck} from \"@fortawesome/free-regular-svg-icons\";\nimport {faLink, faMagnifyingGlass, faPerson, faSave} from \"@fortawesome/free-solid-svg-icons\";\n\nexport type ProfileDataFormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    contacts: ContactsType\n    aboutMe: string\n}\n\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormDataType>> = ({\n                                                                                          handleSubmit,\n                                                                                          initialValues, error\n                                                                                      }) => {\n    return (\n        <div className={s.profileDataForm}>\n            <form onSubmit={handleSubmit}>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faPerson}/>\n                        <b> Full name: </b>\n                        <Field placeholder=\"full name\" name={\"fullName\"} component={Input}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faAddressCard}/>\n                        <b> About me: </b>\n                        <Field placeholder=\"about me\" name={\"aboutMe\"} component={Textarea} />\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faMagnifyingGlass}/>\n                        <b> Looking for a job: </b>\n                        <Field name={\"lookingForAJob\"} component={Input} type={\"checkbox\"} className={s.checkbox}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faCircleCheck}/>\n                        <b> My skills: </b>\n                        <Field placeholder=\"my skills\" name={\"lookingForAJobDescription\"} component={Textarea}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faLink}/>\n                        <b> Contacts: </b>\n\n                        <div className={s.contacts}>\n                            {initialValues.contacts && Object.keys(initialValues.contacts).map(key => {\n                                return <div key={key}>\n                                    <b>{key}:</b>\n                                    <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\n                                    {error && <div className={s.error}>{error}</div>}\n                                </div>\n                            })}\n                        </div>\n\n                    </div>\n\n                <div>\n                    <button><FontAwesomeIcon icon={faSave}/> Save</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormDataType>({form: \"edit_profile\"})(ProfileDataForm)","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalWindow_modal__8fgAO\",\"modalActive\":\"ModalWindow_modalActive__wdv4Z\",\"modalContent\":\"ModalWindow_modalContent__2aWDg\",\"modalContentActive\":\"ModalWindow_modalContentActive__Cnauk\",\"modalBlock\":\"ModalWindow_modalBlock__zz6+e\",\"buttonsBlock\":\"ModalWindow_buttonsBlock__7vIth\"};","import React from 'react';\nimport style from \"./ModalWindow.module.css\"\n\ntype ModalWindowPropsType = {\n    active: boolean\n    setActive: (value: boolean) => void\n    question: string\n    answerAgree: string\n    answerReject: string\n    agree: () => void\n    reject: () => void\n}\nexport const ModalWindow: React.FC<ModalWindowPropsType> = ({\n                                                                active,\n                                                                setActive,\n                                                                answerReject,\n                                                                answerAgree,\n                                                                question, agree, reject\n                                                            }) => {\n    const onAgreeButtonClickHandler = () => {\n        agree()\n    }\n    const onRejectButtonClickHandler = () => {\n        reject()\n    }\n    return (\n        <div className={active ? `${style.modal} ${style.modalActive}` : style.modal} onClick={() => setActive(false)}>\n            <div className={active ? `${style.modalContent} ${style.modalContentActive}` : style.modalContent}\n                 onClick={e => e.stopPropagation()}>\n\n                <div className={style.modalBlock}>\n                    <h3>{question}</h3>\n                    <div className={style.buttonsBlock}>\n                        <div>\n                            <button onClick={onAgreeButtonClickHandler}>{answerAgree}</button>\n                        </div>\n                        <div>\n                            <button onClick={onRejectButtonClickHandler}>{answerReject}</button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"avatarBlock\":\"ProfileAvatar_avatarBlock__KMlFi\",\"profile_avatar\":\"ProfileAvatar_profile_avatar__89Ao1\",\"onlineStatus\":\"ProfileAvatar_onlineStatus__cFZkT\",\"blink\":\"ProfileAvatar_blink__hUgv+\",\"followingStatus\":\"ProfileAvatar_followingStatus__QKjJB\",\"unfollowingStatus\":\"ProfileAvatar_unfollowingStatus__ad7WL\"};","// extracted by mini-css-extract-plugin\nexport default {\"status_span\":\"ProfileStatus_status_span__WSn2u\",\"status_input\":\"ProfileStatus_status_input__57nHd\",\"statusIcon\":\"ProfileStatus_statusIcon__WSEWt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from \"./ProfileStatus.module.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-regular-svg-icons'\n\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus, isOwner}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [innerStatus, setInnerStatus] = useState(status)\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateStatus(innerStatus)\n\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInnerStatus(e.currentTarget.value)\n    }\n    const onDoubleClickOnSpanHandler = () => {\n        if (isOwner) {\n            activateEditMode()\n        } else return false\n    }\n    useEffect(() => {\n        setInnerStatus(status)\n    }, [status])\n\n\n    return <h3>\n        {!editMode && <div>\n            <span className={s.status_span} onDoubleClick={onDoubleClickOnSpanHandler}>\n                <FontAwesomeIcon icon={faComment} className={s.statusIcon}/>\n                {status ? \" \" + status : \" no status\"}\n            </span>\n        </div>}\n        {editMode && <div>\n            <input className={s.status_input} onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\n                   placeholder={\"status\"} value={innerStatus}/>\n        </div>}\n    </h3>\n}\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport style from \"./ProfileAvatar.module.css\";\nimport avatar_default from \"../../../../assets/img/avatar_default.webp\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPersonCircleCheck, faPersonCircleXmark} from \"@fortawesome/free-solid-svg-icons\";\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\n\ntype ProfileAvatarPropsType = {\n    photos?: { small: any; large: any },\n    owner: boolean,\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    followed?: boolean,\n    onClick: () => void, status: string,\n    updateStatus: (status: string) => void\n}\nexport const ProfileAvatar: React.FC<ProfileAvatarPropsType> = (props) => {\n    return <div className={style.avatarBlock}>\n        <div className={style.profile_avatar}>\n            <img src={props.photos?.large ? props.photos.large : avatar_default} alt={\"avatar\"}/>\n            <div className={style.onlineStatus}>online</div>\n\n            {props.owner && <input id=\"upload\" type=\"file\" accept=\"image/*\" onChange={props.onChange}/>}\n\n            {!props.owner &&\n                <div className={props.followed ? style.followingStatus : `${style.followingStatus} ${style.unfollowingStatus}`}\n                     onClick={props.onClick}>\n                    {props.followed ? <FontAwesomeIcon icon={faPersonCircleCheck}/> :\n                        <FontAwesomeIcon icon={faPersonCircleXmark}/>}\n                    {props.followed ? \"following\" : \"unfollowing\"}\n                </div>}\n\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} isOwner={props.owner}/>\n        </div>\n    </div>;\n}","import React, {ChangeEvent, useState} from 'react';\nimport style from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../../common/Preloader\";\nimport {UserProfileType} from \"../../../api/api\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormDataType, ProfileDataReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\nimport {UserType} from \"../../../redux/users-reducer\";\nimport {ModalWindow} from \"../../../common/ModalWindow/ModalWindow\";\nimport {ProfileAvatar} from \"./ProfileAvatar/ProfileAvatar\";\n\n\ntype ProfileInfoPropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n    unfollow: (id: number) => void\n    follow: (id: number) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                                profile,\n                                                                updateStatus,\n                                                                status,\n                                                                isOwner,\n                                                                saveSelectedPhoto,\n                                                                saveProfile,\n                                                                users, unfollow, follow, ...restProps\n                                                            }) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [activeModal, setActiveModal] = useState(false)\n    const followed = users.find(u => u.id === profile.userId)?.followed\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onPhotoSelectedHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            saveSelectedPhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (profile: ProfileDataFormDataType) => {\n        saveProfile(profile)\n        setEditMode(false)\n    }\n    const setActiveModalHandler = (value: boolean) => {\n        setActiveModal(value)\n    }\n    const onAgreeModalHandler = () => {\n        if (followed) {\n            profile.userId && unfollow(profile.userId)\n            setActiveModal(false)\n        } else {\n            profile.userId && follow(profile.userId)\n            setActiveModal(false)\n        }\n    }\n    const onRejectModalHandler = () => {\n        setActiveModal(false)\n    }\n\n    return (\n        <div className={style.profile}>\n\n            <ProfileAvatar photos={profile.photos} owner={isOwner} onChange={onPhotoSelectedHandler} followed={followed}\n                           onClick={() => setActiveModalHandler(true)} status={status} updateStatus={updateStatus}/>\n\n            <div className={style.profileInfoBlock}>\n                {editMode\n                    ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} setEditMode={() => setEditMode(true)}/>}\n            </div>\n\n            {activeModal && <ModalWindow active={activeModal} setActive={setActiveModalHandler}\n                                         question={`Do you want to ${followed ? \"unfollow\" : \"follow\"} ${profile.fullName}?`}\n                                         answerAgree={\"YES, I want\"} answerReject={\"NO, thanks\"}\n                                         agree={onAgreeModalHandler} reject={onRejectModalHandler}/>}\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"myPostsHeader\":\"MyPosts_myPostsHeader__Tner+\",\"textArea_Button\":\"MyPosts_textArea_Button__PXBSb\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"postStyle\":\"Post_postStyle__RX8XC\",\"avatarOfPost\":\"Post_avatarOfPost__Y5UhE\",\"likeCount\":\"Post_likeCount__kwfc5\"};","import React from \"react\";\nimport classes from \"./Post.module.css\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faHeart} from '@fortawesome/free-solid-svg-icons'\nimport defaultAvatar from \"./../../../../assets/img/avatar_default.webp\"\n\nexport type PostPropsType = {\n    id: number\n    post: string\n    likeCount: number\n    onLikePost: (id: number, likeCount: number)=>void\n    avatar: any\n}\n\nconst Post: React.FC<PostPropsType> = ({id, post, likeCount, onLikePost, avatar}) => {\n    const onLikeClickHandler = ()=>{\n        onLikePost(id, likeCount)\n    }\n    return (\n        <div className={classes.post}>\n            <div className={classes.avatarOfPost}>\n                <img src={avatar ? avatar : defaultAvatar}/>\n                <div className={classes.postStyle}>\n                    {post}\n                </div>\n                <div className={classes.likeCount} onClick={onLikeClickHandler}>\n                    <FontAwesomeIcon icon={faHeart}/> {likeCount}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/Forms-control/FormsControl\";\n\nconst maxLengthCreator30 = maxLengthCreator(30);\n\nexport const MyPosts: React.FC<MyPostsPropsType> = ({addPost, posts, likePost, profilePhoto, ...restProps}) => {\n    const onAddPost = (values: any) => {\n        addPost(values.newPostText);\n    }\n    const onLikePost = (postID: number, likeCount: number) => {\n       likePost(postID, likeCount)\n    }\n    const postElements = posts.map((p, index) => (\n        <Post key={index} id={p.id} post={p.post} avatar={profilePhoto} likeCount={p.likeCount} onLikePost={()=>onLikePost(p.id, p.likeCount+1)}/>))\n\n    return (\n        <div className={classes.postsBlock}>\n            <h3 className={classes.myPostsHeader}>Posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            {postElements}\n        </div>\n    )\n}\n\nconst AddNewPostForm = (props: any) => {\n    return (<form className={classes.textArea_Button} onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name=\"newPostText\" placeholder={\"What's new?\"} validate={[required, maxLengthCreator30]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostFormRedux\"})(AddNewPostForm)","import React from \"react\";\nimport {addPostAC, likePostAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype PostType = {\n    id: number\n    post: string\n    likeCount: number\n}\ntype MapStateToPropsType = {\n    posts: PostType[]\n    profilePhoto: any\n}\ntype MapDispatchToProps = {\n    addPost: (newPostText: string) => void\n    likePost: (postID: number, likeCount: number) => void\n}\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        profilePhoto: state.profilePage.profile.photos?.large\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        },\n        likePost: (postID: number, likeCount: number) => {\n            dispatch(likePostAC(postID, likeCount))\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../api/api\";\nimport style from \"./Profile.module.css\"\nimport {UserType} from \"../../redux/users-reducer\";\n\n\ntype ProfilePropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n    unfollow: (id: number) => void\n    follow: (id: number) => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = ({\n                                                 userID,\n                                                 profile,\n                                                 status,\n                                                 updateStatus,\n                                                 isOwner,\n                                                 saveSelectedPhoto,\n                                                 saveProfile,\n                                                 users, unfollow, follow\n                                             }) => {\n    return (\n        <div className={style.profile}>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner}\n                         saveSelectedPhoto={saveSelectedPhoto} saveProfile={saveProfile} userID={userID} users={users} unfollow={unfollow} follow={follow}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    getStatusTC,\n    getUserProfileTC, saveProfileTC, saveSelectedPhotoTC,\n    updateStatusTC\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {UserProfileType} from \"../../api/api\";\nimport {followTC, unfollowTC, UserType} from \"../../redux/users-reducer\";\n\n\ntype MapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserID: number | null\n    users: Array<UserType>\n\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (profile: any) => void\n    getUserStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n}\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PathParamsType = {\n    userID: any\n}\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    isAuth: state.auth.isAuth,\n    authorizedUserID: state.auth.id,\n    users: state.usersPage.users\n\n})\n\nclass ProfileContainer extends React.Component<PropsType> {\n    follow = (id: number) => {\n        this.props.follow(id)\n    }\n    unfollow = (id: number) => {\n        this.props.unfollow(id)\n    }\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = this.props.authorizedUserID\n            if (!userID) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userID)\n        this.props.getUserStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID || this.props.profile.photos?.large !== prevProps.profile.photos?.large) {\n            this.refreshProfile()\n        }\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props} userID={this.props.authorizedUserID} isOwner={!this.props.match.params.userID} profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus} saveSelectedPhoto={this.props.saveSelectedPhoto} users={this.props.users} unfollow={this.unfollow} follow={this.follow}/>\n        )\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUserProfile: getUserProfileTC,\n        getUserStatus: getStatusTC,\n        updateStatus: updateStatusTC,\n        saveSelectedPhoto: saveSelectedPhotoTC,\n        saveProfile: saveProfileTC,\n        follow: followTC,\n        unfollow: unfollowTC,\n    }),\n    withRouter, withAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>){function RedirectComponent(props: MapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n   return ConnectedAuthRedirectComponent;\n};\n\n"],"names":["Contact","contactTitle","contactValue","className","s","ProfileData","profile","isOwner","setEditMode","fullName","icon","faAddressCard","aboutMe","faMagnifyingGlass","lookingForAJob","faCircleCheck","lookingForAJobDescription","faLink","contacts","Object","keys","map","key","onClick","faPen","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","faPerson","Field","placeholder","name","component","Input","Textarea","type","faSave","ModalWindow","active","setActive","answerReject","answerAgree","question","agree","reject","style","e","stopPropagation","status","updateStatus","useState","editMode","innerStatus","setInnerStatus","useEffect","onDoubleClick","faComment","onChange","currentTarget","value","autoFocus","onBlur","ProfileAvatar","props","src","photos","large","avatar_default","alt","owner","id","accept","followed","faPersonCircleCheck","faPersonCircleXmark","ProfileInfo","saveSelectedPhoto","saveProfile","users","unfollow","follow","activeModal","setActiveModal","find","u","userId","Preloader","setActiveModalHandler","target","files","length","post","likeCount","onLikePost","avatar","classes","defaultAvatar","faHeart","maxLengthCreator30","maxLengthCreator","AddNewPostFormRedux","validate","required","MyPostsContainer","connect","state","posts","profilePage","profilePhoto","dispatch","addPost","newPostText","addPostAC","likePost","postID","likePostAC","postElements","p","index","values","userID","ProfileContainer","this","match","params","authorizedUserID","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","isAuth","auth","usersPage","getUserProfileTC","getStatusTC","updateStatusTC","saveSelectedPhotoTC","saveProfileTC","followTC","unfollowTC","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}