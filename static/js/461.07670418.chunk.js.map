{"version":3,"file":"static/js/461.07670418.chunk.js","mappings":"8OACA,EAA0B,6BAA1B,EAAqE,iCAArE,EAAuH,oCAAvH,EAA0K,kCAA1K,EAAiQ,qCAAjQ,EAAyT,sC,UCAzT,EAA8B,mCAA9B,EAAgF,oCAAhF,EAAiI,kC,6BC+CjI,EArC0E,SAAC,GAAqC,IAApCA,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,QAC9F,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAsCF,EAAAA,EAAAA,UAASH,GAA/C,eAAOM,EAAP,KAAoBC,EAApB,KAsBA,OALAC,EAAAA,EAAAA,YAAU,WACND,EAAeP,EAClB,GAAE,CAACA,KAGG,2BACDI,IAAY,0BACV,kBAAMK,UAAWC,EAAeC,cAZL,WAC/B,IAAIT,EAEG,OAAO,EAbdG,GAAY,EAcf,EAQO,WACI,SAAC,IAAD,CAAiBO,KAAMC,EAAAA,IAAWJ,UAAWC,IAC5CV,EAAS,IAAMA,EAAS,kBAGhCI,IAAY,0BACT,kBAAOK,UAAWC,EAAgBI,SArBnB,SAACC,GACpBR,EAAeQ,EAAEC,cAAcC,MAClC,EAmBmEC,WAAS,EAACC,OA1BnD,WACvBd,GAAY,GACZJ,EAAaK,EAEhB,EAuBcc,YAAa,SAAUH,MAAOX,QAGhD,E,UC9CD,EAA+B,kCAA/B,EAA+E,iCAA/E,EAAkI,qCAAlI,EAA8K,0BAA9K,EAA0N,qCCA1N,EAA0B,yBAA1B,EAA2D,uBAA3D,EAA4F,yBAA5F,EAA6H,uBCMhHe,EAAsC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC/D,OACI,iBAAKd,UAAWC,EAAhB,WACI,kBAAMD,UAAWC,EAAjB,UAA2BY,EAA3B,QACA,iBAAMb,UAAWC,EAAjB,SAA2Ba,IAA8B,iBAAMd,UAAWC,EAAjB,yBAGpE,E,UCEYc,EAA8C,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASvB,EAA0B,EAA1BA,QAASG,EAAiB,EAAjBA,YAC3E,OACI,iBAAKI,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,wBAAKe,EAAQC,YACb,iBAAKjB,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMe,EAAAA,IAAelB,UAAWC,KACjD,uCACCe,EAAQG,QAAUH,EAAQG,QAAU,2BAEzC,iBAAKnB,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMiB,EAAAA,IAAmBpB,UAAWC,KACrD,gDACCe,EAAQK,eAAiB,MAAQ,SAEtC,iBAAKrB,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMmB,EAAAA,IAAetB,UAAWC,KACjD,0CACCe,EAAQO,0BAA4BP,EAAQO,0BAA4B,2BAE7E,iBAAKvB,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMqB,EAAAA,IAAQxB,UAAWC,KAC1C,uCACCe,EAAQS,UAAYC,OAAOC,KAAKX,EAAQS,UAAUG,KAAI,SAAAC,GACnD,OAAO,SAACjB,EAAD,CAAmBC,aAAcgB,EAAKf,aAAcE,EAAQS,SAASI,IAAvDA,EACxB,UAGRpC,IAAW,gBAAKO,UAAWC,EAAhB,UACR,oBAAQ6B,QAASlC,EAAjB,WACI,SAAC,IAAD,CAAiBO,KAAM4B,EAAAA,IAAO/B,UAAWC,IACxC,uBAKpB,E,6BCnDD,EAAwB,+BAAxB,EAAyE,yCAAzE,EAA6H,kCAA7H,EAA0K,kCAA1K,EAAuN,kCCwE1M+B,GAAuBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,gBAA1CD,EAxDiD,SAAC,GAGO,IAFHE,EAEE,EAFFA,aACAC,EACE,EADFA,cAAeC,EACb,EADaA,MAErG,OACI,gBAAKrC,UAAWC,EAAhB,UACI,kBAAMqC,SAAUH,EAAhB,WAEQ,iBAAKnC,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMoC,EAAAA,OACvB,yCACA,SAACC,EAAA,EAAD,CAAO7B,YAAY,YAAY8B,KAAM,WAAYC,UAAWC,EAAAA,QAGhE,iBAAK3C,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMe,EAAAA,OACvB,wCACA,SAACsB,EAAA,EAAD,CAAO7B,YAAY,WAAW8B,KAAM,UAAWC,UAAWE,EAAAA,QAG9D,iBAAK5C,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMiB,EAAAA,OACvB,iDACA,SAACoB,EAAA,EAAD,CAAOC,KAAM,iBAAkBC,UAAWC,EAAAA,EAAOE,KAAM,WAAY7C,UAAWC,QAGlF,iBAAKD,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMmB,EAAAA,OACvB,yCACA,SAACkB,EAAA,EAAD,CAAO7B,YAAY,YAAY8B,KAAM,4BAA6BC,UAAWE,EAAAA,QAGjF,iBAAK5C,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAMqB,EAAAA,OACvB,wCAEA,gBAAKxB,UAAWC,EAAhB,SACKmC,EAAcX,UAAYC,OAAOC,KAAKS,EAAcX,UAAUG,KAAI,SAAAC,GAC/D,OAAO,4BACH,yBAAIA,EAAJ,QACA,SAACW,EAAA,EAAD,CAAO7B,YAAakB,EAAKY,KAAM,YAAcZ,EAAKa,UAAWC,EAAAA,IAC5DN,IAAS,gBAAKrC,UAAWC,EAAhB,SAA0BoC,MAHvBR,EAKpB,UAKb,0BACI,+BAAQ,SAAC,IAAD,CAAiB1B,KAAM2C,EAAAA,MAA/B,iBAKnB,I,mGC/CYC,EAA8C,SAAC,GAUO,IAAD,IATF/B,EASE,EATFA,QACAxB,EAQE,EARFA,aACAD,EAOE,EAPFA,OACAE,EAME,EANFA,QACAuD,EAKE,EALFA,kBACAC,EAIE,EAJFA,YAEAC,GAEE,EAHFC,OAGE,EAFFD,OAG5D,IAD8D,aAC9BxD,EAAAA,EAAAA,WAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMwD,EAAQ,UAAGF,EAAMG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOvC,EAAQwC,MAArB,WAAf,aAAG,EAA0CJ,SAG3D,IAAKpC,EACD,OAAO,SAACyC,EAAA,EAAD,IAcX,OACI,iBAAKzD,UAAWC,EAAhB,WAEI,gBAAKD,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKyD,IAAK,UAAA1C,EAAQ2C,cAAR,SAAgBC,MAAQ5C,EAAQ2C,OAAOC,MAAQC,EAAgBC,IAAK,YAC9E,gBAAK9D,UAAWC,EAAhB,oBAECR,IAAW,kBAAOoD,KAAK,OAAOxC,SAlBhB,SAACC,GACxBA,EAAEyD,OAAOC,OAAS1D,EAAEyD,OAAOC,MAAMC,QACjCjB,EAAkB1C,EAAEyD,OAAOC,MAAM,GAExC,IAgBgBZ,IACG,iBAAKpD,UAAWC,EAAhB,WACI,SAAC,IAAD,CAAiBE,KAAM+D,EAAAA,MAD3B,gBAKJ,SAAC,EAAD,CAAwB3E,OAAQA,EAAQC,aAAcA,EAAcC,QAASA,UAIrF,gBAAKO,UAAWC,EAAhB,SACKN,GACK,SAACqC,EAAD,CAAsBM,SA3BvB,SAACtB,GACdiC,EAAYjC,EAEf,EAwB2DoB,cAAepB,KACzD,SAACD,EAAD,CAAaC,QAASA,EAASvB,QAASA,EAASG,YAAa,kBAAMA,GAAY,EAAlB,QAKnF,E,UCjFD,EAA6B,4BAA7B,EAAyE,+BAAzE,EAA0H,iCCA1H,EAAuB,mBAAvB,GAAsD,wBAAtD,GAA6F,2BAA7F,GAAoI,wBCyBpI,GAjBsC,SAAC,GAAuB,IAAtBuE,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC1C,OACI,gBAAKpE,UAAWqE,EAAhB,UACI,iBAAKrE,UAAWqE,GAAhB,WACI,gBACIX,IAAI,4JACR,gBAAK1D,UAAWqE,GAAhB,SACKF,KAEL,iBAAKnE,UAAWqE,GAAhB,WACI,iCAAO,gBAAKX,IAAI,+FAA+FI,IAAI,aADvH,IACyIM,SAKxJ,E,kCChBKE,IAAqBC,EAAAA,GAAAA,GAAiB,IA6BtCC,IAAsBvC,EAAAA,EAAAA,GAAU,CAACC,KAAM,8BAAjBD,EAXL,SAACwC,GACpB,OAAQ,kBAAMzE,UAAWqE,EAAyB/B,SAAUmC,EAAMtC,aAA1D,WACA,0BACI,SAACK,EAAA,EAAD,CAAOE,UAAWE,EAAAA,EAAUH,KAAK,cAAc9B,YAAa,cAAe+D,SAAU,CAACC,GAAAA,EAAUL,SAEpG,0BACI,6CAIf,I,WCLYM,IAAmBC,EAAAA,GAAAA,KAZV,SAACC,GACnB,MAAO,CACHC,MAAOD,EAAME,YAAYD,MAEhC,IACwB,SAACE,GACtB,MAAO,CACHC,QAAS,SAACC,GACNF,GAASG,EAAAA,EAAAA,IAAUD,GACtB,EAER,GAC+BN,EDrBmB,SAAC,GAAoC,IAAnCK,EAAkC,EAAlCA,QAASH,EAAyB,EAAzBA,MAItDM,IAJ+E,aAIhEN,EAAMnD,KAAI,SAAC0D,EAAGC,GAAJ,OACzB,SAAC,GAAD,CAAkBhC,GAAI+B,EAAE/B,GAAIY,KAAMmB,EAAEnB,KAAMC,UAAWkB,EAAElB,WAA5CmB,EADc,KAG7B,OACI,iBAAKvF,UAAWqE,EAAhB,WACI,eAAIrE,UAAWqE,EAAf,oBACA,SAACG,GAAD,CAAqBlC,SATb,SAACkD,GACbN,EAAQM,EAAOL,YAClB,IAQQE,IAGZ,IEvBD,GAA0B,yB,oGCsC1B,GApB4C,SAAC,GAUO,IATHlC,EASE,EATFA,OACAnC,EAQE,EARFA,QACAzB,EAOE,EAPFA,OACAC,EAME,EANFA,aACAC,EAKE,EALFA,QACAuD,EAIE,EAJFA,kBACAC,EAGE,EAHFA,YACAC,EAEE,EAFFA,OAEE,aAC/C,OACI,iBAAKlD,UAAWyF,GAAhB,WACI,SAAC1C,EAAD,CAAa/B,QAASA,EAASzB,OAAQA,EAAQC,aAAcA,EAAcC,QAASA,EACvEuD,kBAAmBA,EAAmBC,YAAaA,EAAaE,OAAQA,EAAQD,MAAOA,KACpG,SAAC0B,GAAD,MAGX,E,iCCUKc,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CA8BD,OA9BCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACF,WACI,IAAIvC,EAASwC,KAAKlB,MAAMmB,MAAMC,OAAO1C,OAChCA,IACDA,EAASwC,KAAKlB,MAAMqB,mBAEhBH,KAAKlB,MAAMsB,QAAQC,KAAK,UAGhCL,KAAKlB,MAAMwB,eAAe9C,GAC1BwC,KAAKlB,MAAMyB,cAAc/C,EAC5B,kCAED,WACIwC,KAAKQ,gBACR,mCAED,SAAmBC,EAAgCC,EAAyBC,GACpEX,KAAKlB,MAAMmB,MAAMC,OAAO1C,SAAWiD,EAAUR,MAAMC,OAAO1C,QAC1DwC,KAAKQ,gBAEZ,uBAGD,WACI,OACI,SAAC,IAAD,kBAAaR,KAAKlB,OAAlB,IAAyBtB,OAAQwC,KAAKlB,MAAMqB,iBAAkBrG,SAAUkG,KAAKlB,MAAMmB,MAAMC,OAAO1C,OAAQnC,QAAS2E,KAAKlB,MAAMzD,QACnHzB,OAAQoG,KAAKlB,MAAMlF,OACnBC,aAAcmG,KAAKlB,MAAMjF,aAAcwD,kBAAmB2C,KAAKlB,MAAMzB,kBAAmBE,MAAOyC,KAAKlB,MAAMvB,QAE1H,OA9BCwC,CAAyBa,EAAAA,WAiC/B,IAAeC,EAAAA,GAAAA,KACX3B,EAAAA,GAAAA,KA3CkB,SAACC,GAAD,MAA+C,CACjE9D,QAAS8D,EAAME,YAAYhE,QAC3BzB,OAAQuF,EAAME,YAAYzF,OAC1BkH,OAAQ3B,EAAM4B,KAAKD,OACnBX,iBAAkBhB,EAAM4B,KAAKnD,GAC7BL,MAAO4B,EAAM6B,UAAUzD,MALL,GA2CO,CACrB+C,eAAgBW,EAAAA,GAChBV,cAAeW,EAAAA,GACfrH,aAAcsH,EAAAA,GACd9D,kBAAmB+D,EAAAA,GACnB9D,YAAa+D,EAAAA,KAEjBC,GAAAA,GAAYC,GAAAA,EARhB,CAQkCxB,G,mIChF9ByB,EAA6B,SAACrC,GAAD,MAA0D,CACvF2B,OAAQ3B,EAAM4B,KAAKD,OADU,EAI1B,SAASS,EAAqBE,GAOlC,OADsCvC,EAAAA,EAAAA,IAAQsC,EAARtC,EANyB,SAA2BJ,GACrF,IAAKgC,EAAwBhC,EAAxBgC,OAAWY,GAAhB,OAA6B5C,EAA7B,GACA,OAAKgC,GACE,SAACW,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUC,GAAI,UAErC,GAIJ,C","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ProfileData.module.css?ce4d","webpack://samurai-way/./src/components/Profile/Contact/Contact.module.css?a337","components/Profile/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__XM2oU\",\"avatarBlock\":\"ProfileInfo_avatarBlock__igx2X\",\"profile_avatar\":\"ProfileInfo_profile_avatar__VJNQY\",\"onlineStatus\":\"ProfileInfo_onlineStatus__o2VeF\",\"blink\":\"ProfileInfo_blink__4lbZX\",\"followingStatus\":\"ProfileInfo_followingStatus__sl0TA\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__ZTFU2\"};","// extracted by mini-css-extract-plugin\nexport default {\"status_span\":\"ProfileStatus_status_span__zHK1n\",\"status_input\":\"ProfileStatus_status_input__bTamG\",\"statusIcon\":\"ProfileStatus_statusIcon__JxeCH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from \"./ProfileStatus.module.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-regular-svg-icons'\n\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus, isOwner}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [innerStatus, setInnerStatus] = useState(status)\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateStatus(innerStatus)\n\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInnerStatus(e.currentTarget.value)\n    }\n    const onDoubleClickOnSpanHandler = () => {\n        if (isOwner) {\n            activateEditMode()\n        } else return false\n    }\n    useEffect(() => {\n        setInnerStatus(status)\n    }, [status])\n\n\n    return <h3>\n        {!editMode && <div>\n            <span className={s.status_span} onDoubleClick={onDoubleClickOnSpanHandler}>\n                <FontAwesomeIcon icon={faComment} className={s.statusIcon}/>\n                {status ? \" \" + status : \" no status\"}\n            </span>\n        </div>}\n        {editMode && <div>\n            <input className={s.status_input} onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\n                   placeholder={\"status\"} value={innerStatus}/>\n        </div>}\n    </h3>\n}\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"profile_data\":\"ProfileData_profile_data__9qsUa\",\"description\":\"ProfileData_description__QBhvE\",\"descriptionItem\":\"ProfileData_descriptionItem__xMqvG\",\"edit\":\"ProfileData_edit__tP1nd\",\"descriptionIcon\":\"ProfileData_descriptionIcon__YzH8V\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__iBnrC\",\"title\":\"Contact_title__ZKO0l\",\"noValue\":\"Contact_noValue__GUg0l\",\"value\":\"Contact_value__przRR\"};","import React from 'react';\nimport s from \"./Contact.module.css\"\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            <span className={s.title}>{contactTitle}:</span>\n            <span className={s.value}>{contactValue ? contactValue : <span className={s.noValue}>no info</span>}</span>\n        </div>\n    );\n};","import React from 'react';\nimport s from \"./ProfileData.module.css\";\nimport {UserProfileType} from \"../../../../api/api\";\nimport {Contact} from \"../../Contact/Contact\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faAddressCard} from '@fortawesome/free-regular-svg-icons'\nimport {faCircleCheck} from '@fortawesome/free-regular-svg-icons'\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { faLink} from '@fortawesome/free-solid-svg-icons'\nimport { faPen} from '@fortawesome/free-solid-svg-icons'\n\nexport type ProfileDataPropsType = {\n    profile: UserProfileType\n    isOwner: boolean\n    setEditMode: ()=>void\n}\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, setEditMode}) => {\n    return (\n        <div className={s.profile_data}>\n            <div className={s.description}>\n                <h2>{profile.fullName}</h2>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faAddressCard} className={s.descriptionIcon}/>\n                    <b> About me: </b>\n                    {profile.aboutMe ? profile.aboutMe : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faMagnifyingGlass} className={s.descriptionIcon}/>\n                    <b> Looking for a job: </b>\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faCircleCheck} className={s.descriptionIcon}/>\n                    <b> My skills: : </b>\n                    {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faLink} className={s.descriptionIcon}/>\n                    <b> Contacts: </b>\n                    {profile.contacts && Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    })}\n                </div>\n            </div>\n            {isOwner && <div className={s.edit}>\n                <button onClick={setEditMode}>\n                    <FontAwesomeIcon icon={faPen} className={s.descriptionIcon}/>\n                    {\" Edit profile\"}\n                </button>\n            </div>}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"ProfileDataForm_error__DYUqN\",\"profileDataForm\":\"ProfileDataForm_profileDataForm__d4e88\",\"dataItem\":\"ProfileDataForm_dataItem__G17JM\",\"checkbox\":\"ProfileDataForm_checkbox__DO0Uc\",\"contacts\":\"ProfileDataForm_contacts__xd39g\"};","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../../../common/Forms-control/FormsControl\";\nimport {ContactsType} from \"../../../../api/api\";\nimport s from \"./ProfileDataForm.module.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faAddressCard, faCircleCheck} from \"@fortawesome/free-regular-svg-icons\";\nimport {faLink, faMagnifyingGlass, faPerson, faSave} from \"@fortawesome/free-solid-svg-icons\";\n\nexport type ProfileDataFormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    contacts: ContactsType\n    aboutMe: string\n}\n\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormDataType>> = ({\n                                                                                          handleSubmit,\n                                                                                          initialValues, error\n                                                                                      }) => {\n    return (\n        <div className={s.profileDataForm}>\n            <form onSubmit={handleSubmit}>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faPerson}/>\n                        <b> Full name: </b>\n                        <Field placeholder=\"full name\" name={\"fullName\"} component={Input}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faAddressCard}/>\n                        <b> About me: </b>\n                        <Field placeholder=\"about me\" name={\"aboutMe\"} component={Textarea} />\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faMagnifyingGlass}/>\n                        <b> Looking for a job: </b>\n                        <Field name={\"lookingForAJob\"} component={Input} type={\"checkbox\"} className={s.checkbox}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faCircleCheck}/>\n                        <b> My skills: </b>\n                        <Field placeholder=\"my skills\" name={\"lookingForAJobDescription\"} component={Textarea}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faLink}/>\n                        <b> Contacts: </b>\n\n                        <div className={s.contacts}>\n                            {initialValues.contacts && Object.keys(initialValues.contacts).map(key => {\n                                return <div key={key}>\n                                    <b>{key}:</b>\n                                    <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\n                                    {error && <div className={s.error}>{error}</div>}\n                                </div>\n                            })}\n                        </div>\n\n                    </div>\n\n                <div>\n                    <button><FontAwesomeIcon icon={faSave}/> Save</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormDataType>({form: \"edit_profile\"})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../../common/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport avatar_default from \"./../../../assets/img/avatar_default.webp\"\nimport {UserProfileType} from \"../../../api/api\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormDataType, ProfileDataReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\nimport {UserType} from \"../../../redux/users-reducer\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faPersonCircleCheck} from '@fortawesome/free-solid-svg-icons'\n\n\ntype ProfileInfoPropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                                profile,\n                                                                updateStatus,\n                                                                status,\n                                                                isOwner,\n                                                                saveSelectedPhoto,\n                                                                saveProfile,\n                                                                userID,\n                                                                users,\n                                                                ...restProps\n                                                            }) => {\n    const [editMode, setEditMode] = useState(false)\n    const followed = users.find(u => u.id === profile.userId)?.followed\n\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n\n    const onPhotoSelectedHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            saveSelectedPhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (profile: ProfileDataFormDataType) => {\n        saveProfile(profile)\n        //setEditMode(false)\n    }\n\n    return (\n        <div className={s.profile}>\n\n            <div className={s.avatarBlock}>\n                <div className={s.profile_avatar}>\n                    <img src={profile.photos?.large ? profile.photos.large : avatar_default} alt={\"avatar\"}/>\n                    <div className={s.onlineStatus}>online</div>\n\n                    {isOwner && <input type=\"file\" onChange={onPhotoSelectedHandler}/>}\n\n                    {followed &&\n                        <div className={s.followingStatus}>\n                            <FontAwesomeIcon icon={faPersonCircleCheck}/>\n                            following\n                        </div>}\n\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\n                </div>\n            </div>\n\n            <div className={s.profileInfoBlock}>\n                {editMode\n                    ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} setEditMode={() => setEditMode(true)}/>}\n            </div>\n        </div>\n    );\n\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"myPostsHeader\":\"MyPosts_myPostsHeader__Tner+\",\"textArea_Button\":\"MyPosts_textArea_Button__PXBSb\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"postStyle\":\"Post_postStyle__RX8XC\",\"avatarOfPost\":\"Post_avatarOfPost__Y5UhE\",\"likeCount\":\"Post_likeCount__kwfc5\"};","import React from \"react\";\nimport classes from \"./Post.module.css\";\n\nexport type PostPropsType = {\n    id: number\n    post: string\n    likeCount: number\n}\n\nconst Post: React.FC<PostPropsType> = ({post, likeCount}) => {\n    return (\n        <div className={classes.post}>\n            <div className={classes.avatarOfPost}>\n                <img\n                    src=\"https://static.vecteezy.com/system/resources/previews/004/899/833/large_2x/beautiful-girl-with-blue-hair-avatar-of-woman-for-social-network-vector.jpg\"/>\n                <div className={classes.postStyle}>\n                    {post}\n                </div>\n                <div className={classes.likeCount}>\n                    <span> <img src=\"https://www.pinclipart.com/picdir/middle/59-595072_heart-instagram-like-icon-png-clipart.png\" alt=\"likes\"/></span> {likeCount}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/Forms-control/FormsControl\";\n\nconst maxLengthCreator30 = maxLengthCreator(30);\n\nexport const MyPosts: React.FC<MyPostsPropsType> = ({addPost, posts, ...restProps}) => {\n    let onAddPost = (values: any) => {\n        addPost(values.newPostText);\n    }\n    let postElements = posts.map((p, index) => (\n        <Post key={index} id={p.id} post={p.post} likeCount={p.likeCount}/>))\n\n    return (\n        <div className={classes.postsBlock}>\n            <h3 className={classes.myPostsHeader}>Posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            {postElements}\n        </div>\n    )\n}\n\nconst AddNewPostForm = (props: any) => {\n    return (<form className={classes.textArea_Button} onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name=\"newPostText\" placeholder={\"What's new?\"} validate={[required, maxLengthCreator30]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostFormRedux\"})(AddNewPostForm)","import React from \"react\";\nimport {addPostAC} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype PostType = {\n    id: number\n    post: string\n    likeCount: number\n}\ntype MapStateToPropsType = {\n    posts: PostType[]\n}\ntype MapDispatchToProps = {\n    addPost: (newPostText: string)=>void\n}\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType=> {\n    return {\n        posts: state.profilePage.posts\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../api/api\";\nimport style from \"./Profile.module.css\"\nimport {UserType} from \"../../redux/users-reducer\";\n\n\ntype ProfilePropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n}\n\nconst Profile: React.FC<ProfilePropsType> = ({\n                                                 userID,\n                                                 profile,\n                                                 status,\n                                                 updateStatus,\n                                                 isOwner,\n                                                 saveSelectedPhoto,\n                                                 saveProfile,\n                                                 users,\n                                                 ...restProps\n                                             }) => {\n    return (\n        <div className={style.profile}>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner}\n                         saveSelectedPhoto={saveSelectedPhoto} saveProfile={saveProfile} userID={userID} users={users}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    getStatusTC,\n    getUserProfileTC, saveProfileTC, saveSelectedPhotoTC,\n    updateStatusTC\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {UserProfileType} from \"../../api/api\";\nimport {UserType} from \"../../redux/users-reducer\";\n\n\ntype MapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserID: number | null\n    users: Array<UserType>\n\n\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (profile: any) => void\n    getUserStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n}\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PathParamsType = {\n    userID: any\n}\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    isAuth: state.auth.isAuth,\n    authorizedUserID: state.auth.id,\n    users: state.usersPage.users\n\n})\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = this.props.authorizedUserID\n            if (!userID) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userID)\n        this.props.getUserStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\n            this.refreshProfile()\n        }\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props} userID={this.props.authorizedUserID} isOwner={!this.props.match.params.userID} profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus} saveSelectedPhoto={this.props.saveSelectedPhoto} users={this.props.users}/>\n        )\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUserProfile: getUserProfileTC,\n        getUserStatus: getStatusTC,\n        updateStatus: updateStatusTC,\n        saveSelectedPhoto: saveSelectedPhotoTC,\n        saveProfile: saveProfileTC\n    }),\n    withRouter, withAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>){function RedirectComponent(props: MapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n   return ConnectedAuthRedirectComponent;\n};\n\n"],"names":["status","updateStatus","isOwner","useState","editMode","setEditMode","innerStatus","setInnerStatus","useEffect","className","s","onDoubleClick","icon","faComment","onChange","e","currentTarget","value","autoFocus","onBlur","placeholder","Contact","contactTitle","contactValue","ProfileData","profile","fullName","faAddressCard","aboutMe","faMagnifyingGlass","lookingForAJob","faCircleCheck","lookingForAJobDescription","faLink","contacts","Object","keys","map","key","onClick","faPen","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","faPerson","Field","name","component","Input","Textarea","type","faSave","ProfileInfo","saveSelectedPhoto","saveProfile","users","userID","followed","find","u","id","userId","Preloader","src","photos","large","avatar_default","alt","target","files","length","faPersonCircleCheck","post","likeCount","classes","maxLengthCreator30","maxLengthCreator","AddNewPostFormRedux","props","validate","required","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","newPostText","addPostAC","postElements","p","index","values","style","ProfileContainer","this","match","params","authorizedUserID","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","isAuth","auth","usersPage","getUserProfileTC","getStatusTC","updateStatusTC","saveSelectedPhotoTC","saveProfileTC","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}