{"version":3,"file":"static/js/287.063d2123.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileData/ProfileData.module.css?ce4d","webpack://samurai-way/./src/components/Profile/Contact/Contact.module.css?a337","components/Profile/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","webpack://samurai-way/./src/common/ModalWindow/ModalWindow.module.css?5bc5","common/ModalWindow/ModalWindow.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.module.css?47f3","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileAvatar/ProfileStatus/ProfileStatus.module.css?3569","components/Profile/ProfileInfo/ProfileAvatar/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","utils/getArrayWithRandomNumber.ts","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__XM2oU\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__ZTFU2\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile_data\":\"ProfileData_profile_data__9qsUa\",\"description\":\"ProfileData_description__QBhvE\",\"descriptionItem\":\"ProfileData_descriptionItem__xMqvG\",\"edit\":\"ProfileData_edit__tP1nd\",\"descriptionIcon\":\"ProfileData_descriptionIcon__YzH8V\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__iBnrC\",\"title\":\"Contact_title__ZKO0l\",\"noValue\":\"Contact_noValue__GUg0l\",\"value\":\"Contact_value__przRR\"};","import React from 'react';\nimport s from \"./Contact.module.css\"\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            <span className={s.title}>{contactTitle}:</span>\n            <span className={s.value}>{contactValue ? contactValue : <span className={s.noValue}>no info</span>}</span>\n        </div>\n    );\n};","import React from 'react';\nimport s from \"./ProfileData.module.css\";\nimport {UserProfileType} from \"../../../../api/api\";\nimport {Contact} from \"../../Contact/Contact\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faAddressCard} from '@fortawesome/free-regular-svg-icons'\nimport {faCircleCheck} from '@fortawesome/free-regular-svg-icons'\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport { faLink} from '@fortawesome/free-solid-svg-icons'\nimport { faPen} from '@fortawesome/free-solid-svg-icons'\nimport {SuperButton} from \"../../../../common/SuperButton/SuperButton\";\n\nexport type ProfileDataPropsType = {\n    profile: UserProfileType\n    isOwner: boolean\n    setEditMode: ()=>void\n}\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, setEditMode}) => {\n    return (\n        <div className={s.profile_data}>\n            <div className={s.description}>\n                <h2>{profile.fullName}</h2>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faAddressCard} className={s.descriptionIcon}/>\n                    <b> About me: </b>\n                    {profile.aboutMe ? profile.aboutMe : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faMagnifyingGlass} className={s.descriptionIcon}/>\n                    <b> Looking for a job: </b>\n                    {profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faCircleCheck} className={s.descriptionIcon}/>\n                    <b> My skills: </b>\n                    {profile.lookingForAJobDescription ? profile.lookingForAJobDescription : \"description is empty\"}\n                </div>\n                <div className={s.descriptionItem}>\n                    <FontAwesomeIcon icon={faLink} className={s.descriptionIcon}/>\n                    <b> Contacts: </b>\n                    {profile.contacts && Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    })}\n                </div>\n            </div>\n            {isOwner && <div className={s.edit}>\n                <SuperButton onClick={setEditMode}>\n                    <FontAwesomeIcon icon={faPen} className={s.descriptionIcon}/>\n                    {\" Edit profile\"}\n                </SuperButton>\n            </div>}\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"ProfileDataForm_error__DYUqN\",\"profileDataForm\":\"ProfileDataForm_profileDataForm__d4e88\",\"dataItem\":\"ProfileDataForm_dataItem__G17JM\",\"checkbox\":\"ProfileDataForm_checkbox__DO0Uc\",\"contacts\":\"ProfileDataForm_contacts__xd39g\"};","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../../../common/Forms-control/FormsControl\";\nimport {ContactsType} from \"../../../../api/api\";\nimport s from \"./ProfileDataForm.module.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faAddressCard, faCircleCheck} from \"@fortawesome/free-regular-svg-icons\";\nimport {faLink, faMagnifyingGlass, faPerson, faSave} from \"@fortawesome/free-solid-svg-icons\";\nimport {SuperButton} from \"../../../../common/SuperButton/SuperButton\";\n\nexport type ProfileDataFormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    contacts: ContactsType\n    aboutMe: string\n}\n\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormDataType>> = ({\n                                                                                          handleSubmit,\n                                                                                          initialValues, error\n                                                                                      }) => {\n    return (\n        <div className={s.profileDataForm}>\n            <form onSubmit={handleSubmit}>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faPerson}/>\n                        <b> Full name: </b>\n                        <Field placeholder=\"full name\" name={\"fullName\"} component={Input}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faAddressCard}/>\n                        <b> About me: </b>\n                        <Field placeholder=\"about me\" name={\"aboutMe\"} component={Textarea} />\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faMagnifyingGlass}/>\n                        <b> Looking for a job: </b>\n                        <Field name={\"lookingForAJob\"} component={Input} type={\"checkbox\"} className={s.checkbox}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faCircleCheck}/>\n                        <b> My skills: </b>\n                        <Field placeholder=\"my skills\" name={\"lookingForAJobDescription\"} component={Textarea}/>\n                    </div>\n\n                    <div className={s.dataItem}>\n                        <FontAwesomeIcon icon={faLink}/>\n                        <b> Contacts: </b>\n\n                        <div className={s.contacts}>\n                            {initialValues.contacts && Object.keys(initialValues.contacts).map(key => {\n                                return <div key={key}>\n                                    <b>{key}:</b>\n                                    <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\n                                    {error && <div className={s.error}>{error}</div>}\n                                </div>\n                            })}\n                        </div>\n\n                    </div>\n\n                <div>\n                    <SuperButton><FontAwesomeIcon icon={faSave}/> Save</SuperButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormDataType>({form: \"edit_profile\"})(ProfileDataForm)","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalWindow_modal__8fgAO\",\"modalActive\":\"ModalWindow_modalActive__wdv4Z\",\"modalContent\":\"ModalWindow_modalContent__2aWDg\",\"modalContentActive\":\"ModalWindow_modalContentActive__Cnauk\",\"modalBlock\":\"ModalWindow_modalBlock__zz6+e\",\"buttonsBlock\":\"ModalWindow_buttonsBlock__7vIth\"};","import React from 'react';\nimport style from \"./ModalWindow.module.css\"\nimport {SuperButton} from \"../SuperButton/SuperButton\";\n\ntype ModalWindowPropsType = {\n    active: boolean\n    setActive: (value: boolean) => void\n    question: string\n    answerAgree: string\n    answerReject: string\n    agree: () => void\n    reject: () => void\n}\nexport const ModalWindow: React.FC<ModalWindowPropsType> = ({\n                                                                active,\n                                                                setActive,\n                                                                answerReject,\n                                                                answerAgree,\n                                                                question, agree, reject\n                                                            }) => {\n    const onAgreeButtonClickHandler = () => {\n        agree()\n    }\n    const onRejectButtonClickHandler = () => {\n        reject()\n    }\n    return (\n        <div className={active ? `${style.modal} ${style.modalActive}` : style.modal} onClick={() => setActive(false)}>\n            <div className={active ? `${style.modalContent} ${style.modalContentActive}` : style.modalContent}\n                 onClick={e => e.stopPropagation()}>\n\n                <div className={style.modalBlock}>\n                    <h3>{question}</h3>\n                    <div className={style.buttonsBlock}>\n                        <div>\n                            <SuperButton onClick={onAgreeButtonClickHandler}>{answerAgree}</SuperButton>\n                        </div>\n                        <div>\n                            <SuperButton onClick={onRejectButtonClickHandler}>{answerReject}</SuperButton>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"avatarBlock\":\"ProfileAvatar_avatarBlock__KMlFi\",\"profile_avatar\":\"ProfileAvatar_profile_avatar__89Ao1\",\"onlineStatus\":\"ProfileAvatar_onlineStatus__cFZkT\",\"blink\":\"ProfileAvatar_blink__hUgv+\",\"followingStatus\":\"ProfileAvatar_followingStatus__QKjJB\",\"unfollowingStatus\":\"ProfileAvatar_unfollowingStatus__ad7WL\"};","// extracted by mini-css-extract-plugin\nexport default {\"statusBlock\":\"ProfileStatus_statusBlock__I--ZY\",\"status_span\":\"ProfileStatus_status_span__WSn2u\",\"status_input\":\"ProfileStatus_status_input__57nHd\",\"statusIcon\":\"ProfileStatus_statusIcon__WSEWt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from \"./ProfileStatus.module.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-regular-svg-icons'\n\n\ntype ProfileStatusWithHooksPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\nconst ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksPropsType> = ({status, updateStatus, isOwner}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [innerStatus, setInnerStatus] = useState(status)\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        updateStatus(innerStatus)\n\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInnerStatus(e.currentTarget.value)\n    }\n    const onDoubleClickOnSpanHandler = () => {\n        if (isOwner) {\n            activateEditMode()\n        } else return false\n    }\n    useEffect(() => {\n        setInnerStatus(status)\n    }, [status])\n\n\n    return <h3>\n        {!editMode && <div className={s.statusBlock}>\n            <span className={s.status_span} onDoubleClick={onDoubleClickOnSpanHandler}>\n                <FontAwesomeIcon icon={faComment} className={s.statusIcon}/>\n                {status ? \" \" + status : \" no status\"}\n            </span>\n        </div>}\n        {editMode && <div>\n            <input className={s.status_input} onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\n                   placeholder={\"status\"} value={innerStatus}/>\n        </div>}\n    </h3>\n}\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport style from \"./ProfileAvatar.module.css\";\nimport avatar_default from \"../../../../assets/img/avatar_default.webp\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPersonCircleCheck, faPersonCircleXmark} from \"@fortawesome/free-solid-svg-icons\";\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\n\ntype ProfileAvatarPropsType = {\n    photos?: { small: any; large: any },\n    owner: boolean,\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    followed?: boolean,\n    onClick: () => void, status: string,\n    updateStatus: (status: string) => void\n}\nexport const ProfileAvatar: React.FC<ProfileAvatarPropsType> = (props) => {\n    return <div className={style.avatarBlock}>\n        <div className={style.profile_avatar}>\n            <img src={props.photos?.large ? props.photos.large : avatar_default} alt={\"avatar\"}/>\n            <div className={style.onlineStatus}>online</div>\n\n            {props.owner && <input id=\"upload\" type=\"file\" accept=\"image/*\" onChange={props.onChange}/>}\n\n            {!props.owner &&\n                <div className={props.followed ? style.followingStatus : `${style.followingStatus} ${style.unfollowingStatus}`}\n                     onClick={props.onClick}>\n                    {props.followed ? <FontAwesomeIcon icon={faPersonCircleCheck}/> :\n                        <FontAwesomeIcon icon={faPersonCircleXmark}/>}\n                    {props.followed ? \"following\" : \"unfollowing\"}\n                </div>}\n\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} isOwner={props.owner}/>\n        </div>\n    </div>;\n}","import React, {ChangeEvent, useState} from 'react';\nimport style from \"./ProfileInfo.module.css\";\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\nimport {UserProfileType} from \"../../../api/api\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormDataType, ProfileDataReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\nimport {UserType} from \"../../../redux/users-reducer\";\nimport {ModalWindow} from \"../../../common/ModalWindow/ModalWindow\";\nimport {ProfileAvatar} from \"./ProfileAvatar/ProfileAvatar\";\n\n\ntype ProfileInfoPropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n    unfollow: (id: number) => void\n    follow: (id: number) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                                profile,\n                                                                updateStatus,\n                                                                status,\n                                                                isOwner,\n                                                                saveSelectedPhoto,\n                                                                saveProfile,\n                                                                users, unfollow, follow, ...restProps\n                                                            }) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [activeModal, setActiveModal] = useState(false)\n\n    const followed = users.find(u => u.id === profile.userId)?.followed\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onPhotoSelectedHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            saveSelectedPhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (profile: ProfileDataFormDataType) => {\n        saveProfile(profile)\n        setEditMode(false)\n    }\n    const setActiveModalHandler = (value: boolean) => {\n        setActiveModal(value)\n    }\n    const onAgreeModalHandler = () => {\n        if (followed) {\n            profile.userId && unfollow(profile.userId)\n            setActiveModal(false)\n        } else {\n            profile.userId && follow(profile.userId)\n            setActiveModal(false)\n        }\n    }\n    const onRejectModalHandler = () => {\n        setActiveModal(false)\n    }\n\n    return (\n        <div className={style.profile}>\n\n            <ProfileAvatar photos={profile.photos} owner={isOwner} onChange={onPhotoSelectedHandler} followed={followed}\n                           onClick={() => setActiveModalHandler(true)} status={status} updateStatus={updateStatus}/>\n\n            <div className={style.profileInfoBlock}>\n                {editMode\n                    ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} setEditMode={() => setEditMode(true)}/>}\n            </div>\n\n            {activeModal && <ModalWindow active={activeModal} setActive={setActiveModalHandler}\n                                         question={`Do you want to ${followed ? \"unfollow\" : \"follow\"} ${profile.fullName}?`}\n                                         answerAgree={\"YES, I want\"} answerReject={\"NO, thanks\"}\n                                         agree={onAgreeModalHandler} reject={onRejectModalHandler}/>}\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"myPostsHeader\":\"MyPosts_myPostsHeader__Tner+\",\"postElements\":\"MyPosts_postElements__T82nL\",\"addPostForm\":\"MyPosts_addPostForm__iknOL\",\"newPostContent\":\"MyPosts_newPostContent__A9Fkm\",\"newPostField\":\"MyPosts_newPostField__8bWil\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"avatarOfPost\":\"Post_avatarOfPost__Y5UhE\",\"postContentBlock\":\"Post_postContentBlock__XoQc-\",\"likeCount\":\"Post_likeCount__kwfc5\",\"heart\":\"Post_heart__joVNs\"};","import React from \"react\";\nimport style from \"./Post.module.css\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faHeart} from '@fortawesome/free-solid-svg-icons'\nimport defaultAvatar from \"./../../../../assets/img/avatar_default.webp\"\n\nexport type PostPropsType = {\n    id: number\n    post: string\n    likeCount: number\n    onLikePost: (id: number, likeCount: number) => void\n    avatar: any\n    img?: string\n}\n\nconst Post: React.FC<PostPropsType> = ({id, post, likeCount, onLikePost, avatar, img}) => {\n    const onLikeClickHandler = () => {\n        onLikePost(id, likeCount)\n    }\n    return (\n        <div className={style.post}>\n            <div className={style.avatarOfPost}>\n                <img src={avatar ? avatar : defaultAvatar}/>\n            </div>\n            <div className={style.postContentBlock}>\n                <div className={style.postText}>{post}</div>\n                <div className={style.likeCount} onClick={onLikeClickHandler}>\n                    <FontAwesomeIcon icon={faHeart} className={style.heart}/>\n                    <span>{likeCount}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(Post);","import React, {useMemo, useState} from \"react\";\nimport style from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../common/Forms-control/FormsControl\";\nimport {SuperButton} from \"../../../common/SuperButton/SuperButton\";\nimport {getArrayWithRandomNumber} from \"../../../utils/getArrayWithRandomNumber\";\nimport {PostType} from \"../../../redux/profile-reducer\";\n\nconst maxLengthCreator30 = maxLengthCreator(30);\n\nconst MyPosts: React.FC<MyPostsPropsType> = ({addPost, posts, likePost, profilePhoto}) => {\n\n    /// simulate adding a new post to the state (current posts are received from state randomly)\n    const [newPostArray, setNewPostArray] = useState<Array<PostType>>([])\n\n    const onAddPost = (values: any) => {\n        addPost(values.newPostText)\n        /// simulate adding a new post to the state\n        newPostArray.unshift({id: Math.ceil(Math.random()*10000), post: values.newPostText, likeCount: 0})\n        setNewPostArray(newPostArray)\n        values.newPostText=\"\"\n    }\n    const onLikePost = (postID: number, likeCount: number) => {\n        likePost(postID, likeCount)\n        /// simulate adding a new post to the state\n        newPostArray.map(p=>p.id===postID ? p.likeCount++ : p)\n    }\n\n    const randomNumber = useMemo(() => {\n        return getArrayWithRandomNumber(posts, 3)\n    }, [])\n\n\n    const filteredRandomPosts = useMemo(() => {\n        /// simulate adding a new post to the state\n        return newPostArray.concat(posts.filter(p => randomNumber.includes(p.id)))\n    }, [posts, newPostArray])\n\n\n    const postElements = filteredRandomPosts.map((p, index) => (\n        <Post key={index} id={p.id} post={p.post} avatar={profilePhoto} img={p.img} likeCount={p.likeCount}\n              onLikePost={() => onLikePost(p.id, p.likeCount + 1)}/>))\n\n    return (\n        <div className={style.postsBlock}>\n            <h3 className={style.myPostsHeader}>POSTS</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={style.postElements}>{postElements}</div>\n        </div>\n    )\n}\nexport default React.memo(MyPosts)\n\nconst AddNewPostForm = (props: any) => {\n    return (<form className={style.addPostForm} onSubmit={props.handleSubmit}>\n            <div className={style.newPostContent}>\n                <Field component={Textarea} name=\"newPostText\" placeholder={\"What's new?\"}\n                       validate={[required, maxLengthCreator30]} className={style.newPostField}/>\n            </div>\n            <div>\n                <SuperButton>Add post</SuperButton>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostFormRedux\"})(AddNewPostForm)","//array ---> filtered arr\n//amount --->length of arr\n\nexport function getArrayWithRandomNumber(array: Array<any>, amount: number) {\n    const randomPostsArray: Array<number> = []\n    for (let i = 0; i < amount; i++) {\n        let randomNum = Math.ceil(Math.random() * (array.length));\n        randomPostsArray.push(randomNum)\n    }\n    console.log(randomPostsArray)\n    return randomPostsArray\n}","import React from \"react\";\nimport {addPostAC, likePostAC} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\ntype PostType = {\n    id: number\n    post: string\n    likeCount: number\n    img?: string\n}\ntype MapStateToPropsType = {\n    posts: PostType[]\n    profilePhoto: any\n}\ntype MapDispatchToProps = {\n    addPost: (newPostText: string) => void\n    likePost: (postID: number, likeCount: number) => void\n}\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToProps\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        profilePhoto: state.profilePage.profile.photos?.large\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        },\n        likePost: (postID: number, likeCount: number) => {\n            dispatch(likePostAC(postID, likeCount))\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../api/api\";\nimport style from \"./Profile.module.css\"\nimport {UserType} from \"../../redux/users-reducer\";\n\n\ntype ProfilePropsType = {\n    userID: number | null\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    users: Array<UserType>\n    unfollow: (id: number) => void\n    follow: (id: number) => void\n}\n\nconst Profile: React.FC<ProfilePropsType> = ({\n                                                 userID,\n                                                 profile,\n                                                 status,\n                                                 updateStatus,\n                                                 isOwner,\n                                                 saveSelectedPhoto,\n                                                 saveProfile,\n                                                 users, unfollow, follow\n                                             }) => {\n    return (\n        <div className={style.profile}>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner}\n                         saveSelectedPhoto={saveSelectedPhoto} saveProfile={saveProfile} userID={userID} users={users} unfollow={unfollow} follow={follow}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {\n    getStatusTC,\n    getUserProfileTC, saveProfileTC, saveSelectedPhotoTC,\n    updateStatusTC\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {UserProfileType} from \"../../api/api\";\nimport {followTC, unfollowTC, UserType} from \"../../redux/users-reducer\";\n\n\ntype MapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n    isAuth: boolean\n    authorizedUserID: number | null\n    users: Array<UserType>\n\n}\ntype MapDispatchToPropsType = {\n    getUserProfile: (profile: any) => void\n    getUserStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    saveSelectedPhoto: (photo: File) => void\n    saveProfile: (profile: UserProfileType) => void\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n}\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\ntype PathParamsType = {\n    userID: any\n}\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    isAuth: state.auth.isAuth,\n    authorizedUserID: state.auth.id,\n    users: state.usersPage.users\n\n})\n\nclass ProfileContainer extends React.Component<PropsType> {\n    follow = (id: number) => {\n        this.props.follow(id)\n    }\n    unfollow = (id: number) => {\n        this.props.unfollow(id)\n    }\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = this.props.authorizedUserID\n            if (!userID) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userID)\n        this.props.getUserStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID || this.props.profile.photos?.large !== prevProps.profile.photos?.large) {\n            this.refreshProfile()\n        }\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props} userID={this.props.authorizedUserID} isOwner={!this.props.match.params.userID} profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus} saveSelectedPhoto={this.props.saveSelectedPhoto} users={this.props.users} unfollow={this.unfollow} follow={this.follow}/>\n        )\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getUserProfile: getUserProfileTC,\n        getUserStatus: getStatusTC,\n        updateStatus: updateStatusTC,\n        saveSelectedPhoto: saveSelectedPhotoTC,\n        saveProfile: saveProfileTC,\n        follow: followTC,\n        unfollow: unfollowTC,\n    }),\n    withRouter, withAuthRedirect)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>){function RedirectComponent(props: MapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n   return ConnectedAuthRedirectComponent;\n};\n\n"],"names":["Contact","contactTitle","contactValue","className","s","ProfileData","profile","isOwner","setEditMode","fullName","icon","faAddressCard","aboutMe","faMagnifyingGlass","lookingForAJob","faCircleCheck","lookingForAJobDescription","faLink","contacts","Object","keys","map","key","SuperButton","onClick","faPen","ProfileDataReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","faPerson","Field","placeholder","name","component","Input","Textarea","type","faSave","ModalWindow","active","setActive","answerReject","answerAgree","question","agree","reject","style","e","stopPropagation","status","updateStatus","useState","editMode","innerStatus","setInnerStatus","useEffect","onDoubleClick","faComment","onChange","currentTarget","value","autoFocus","onBlur","ProfileAvatar","props","src","photos","large","avatar_default","alt","owner","id","accept","followed","faPersonCircleCheck","faPersonCircleXmark","ProfileInfo","saveSelectedPhoto","saveProfile","users","unfollow","follow","activeModal","setActiveModal","find","u","userId","Preloader","setActiveModalHandler","target","files","length","Post","post","likeCount","onLikePost","avatar","img","defaultAvatar","faHeart","React","maxLengthCreator30","maxLengthCreator","MyPosts","addPost","posts","likePost","profilePhoto","newPostArray","setNewPostArray","randomNumber","useMemo","array","amount","randomPostsArray","i","randomNum","Math","ceil","random","push","console","log","getArrayWithRandomNumber","postElements","concat","filter","p","includes","index","postID","AddNewPostFormRedux","values","newPostText","unshift","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","likePostAC","userID","ProfileContainer","this","match","params","authorizedUserID","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","isAuth","auth","usersPage","getUserProfileTC","getStatusTC","updateStatusTC","saveSelectedPhotoTC","saveProfileTC","followTC","unfollowTC","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}